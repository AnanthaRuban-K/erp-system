# File: docker-compose.production.yml
version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: erp-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - erp-network

  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile.production
      target: production
    container_name: erp-frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_FRONTEND_URL=https://erp.sbrosenterpriseerp.com
      - NEXT_PUBLIC_API_URL=https://api.sbrosenterpriseerp.com
      - NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${pk_test_dHJ1c3RlZC1kdWNrbGluZy00My5jbGVyay5hY2NvdW50cy5kZXYk}
      - CLERK_SECRET_KEY=${sk_test_TsgGRcqT8xXMBwnKthRw6tQz3tOVxWJYuYaCNRHzxl}
      - DATABASE_URL=${postgresql://sbrosdb_owner:npg_rp6hNKdWEk0c@ep-rapid-mountain-a1y4lbio-pooler.ap-southeast-1.aws.neon.tech/sbrosdb?sslmode=require&channel_binding=require}
      
    expose:
      - "3000"
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - erp-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`erp.sbrosenterpriseerp.com`)"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"

  # Backend Service
  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile.production
      target: production
    container_name: erp-backend
    environment:
      - NODE_ENV=production
      - PORT=3001
      - HOST=0.0.0.0
      - FRONTEND_URL=https://erp.sbrosenterpriseerp.com
      - API_URL=https://api.sbrosenterpriseerp.com
      - DATABASE_URL=${postgresql://sbrosdb_owner:npg_rp6hNKdWEk0c@ep-rapid-mountain-a1y4lbio-pooler.ap-southeast-1.aws.neon.tech/sbrosdb?sslmode=require&channel_binding=require}
      - CLERK_SECRET_KEY=${sk_test_TsgGRcqT8xXMBwnKthRw6tQz3tOVxWJYuYaCNRHzxl}
      - CLERK_PUBLISHABLE_KEY=${pk_test_dHJ1c3RlZC1kdWNrbGluZy00My5jbGVyay5hY2NvdW50cy5kZXYk}
      - 
    expose:
      - "3001"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - erp-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.sbrosenterpriseerp.com`)"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"

  # Redis Cache (Optional - if not using Upstash)
  redis:
    image: redis:7-alpine
    container_name: erp-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    expose:
      - "6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - erp-network

  

  # Monitoring - Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: erp-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    expose:
      - "9090"
    restart: unless-stopped
    networks:
      - erp-network

 

networks:
  erp-network:
    driver: bridge